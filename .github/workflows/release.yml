name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build for ${{ matrix.display_name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            display_name: Linux (ARM64, GNU)
            target_triple: aarch64-unknown-linux-gnu
            binary_name: custom-rustdesk-linux-aarch64-gnu

          - runner: ubuntu-latest
            display_name: Linux (x86_64, GNU)
            target_triple: x86_64-unknown-linux-gnu
            binary_name: custom-rustdesk-linux-x86_64-gnu

          - runner: ubuntu-latest
            display_name: Linux (ARM64, MUSL)
            target_triple: aarch64-unknown-linux-musl
            binary_name: custom-rustdesk-linux-aarch64-musl

          - runner: ubuntu-latest
            display_name: Linux (x86_64, MUSL)
            target_triple: x86_64-unknown-linux-musl
            binary_name: custom-rustdesk-linux-x86_64-musl

          - runner: windows-latest
            display_name: Windows (ARM64)
            target_triple: aarch64-pc-windows-msvc
            binary_name: custom-rustdesk-windows-aarch64.exe

          - runner: windows-latest
            display_name: Windows (x86_64)
            target_triple: x86_64-pc-windows-msvc
            binary_name: custom-rustdesk-windows-x86_64.exe

          - runner: macos-latest
            display_name: macOS (Universal)
            target_triple: universal-apple-darwin
            binary_name: custom-rustdesk-macos-universal

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target_triple }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build for Linux
        if: matrix.runner == 'ubuntu-latest'
        run: |
          mkdir artifact
          rustup target add ${{ matrix.target_triple }}

          if [[ "${{ matrix.target_triple }}" == "x86_64-unknown-linux-gnu" ]]; then
            cargo build --release --target ${{ matrix.target_triple }}
          else
            cargo install cross
            cross build --release --target ${{ matrix.target_triple }}
          fi
          mv target/${{ matrix.target_triple }}/release/custom-rustdesk artifact/${{ matrix.binary_name }}

      # Separate this step out is necessary, but I don't know why
      # If this step is combined with the next step "Build for Windows",
      # it will cause the build to fail on Windows (ARM64)
      - name: Install libsodium for Windows aarch64
        if: matrix.target_triple == 'aarch64-pc-windows-msvc'
        shell: pwsh
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg install libsodium:arm64-windows
          echo "SODIUM_LIB_DIR=${{ github.workspace }}\vcpkg\installed\arm64-windows\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build for Windows
        if: matrix.runner == 'windows-latest'
        run: |
          mkdir artifact
          rustup target add ${{ matrix.target_triple }}
          cargo build --release --target ${{ matrix.target_triple }}
          mv target/${{ matrix.target_triple }}/release/custom-rustdesk.exe artifact/${{ matrix.binary_name }}

      - name: Build macOS universal and single-arch binaries
        if: matrix.runner == 'macos-latest'
        run: |
          mkdir artifact
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

          echo "Building for aarch64-apple-darwin..."
          cargo build --release --target aarch64-apple-darwin
          mv target/aarch64-apple-darwin/release/custom-rustdesk artifact/custom-rustdesk-macos-aarch64

          echo "Building for x86_64-apple-darwin..."
          cargo build --release --target x86_64-apple-darwin
          mv target/x86_64-apple-darwin/release/custom-rustdesk artifact/custom-rustdesk-macos-x86_64

          echo "Creating universal binary..."
          lipo -create -output artifact/custom-rustdesk-macos-universal \
            artifact/custom-rustdesk-macos-aarch64 \
            artifact/custom-rustdesk-macos-x86_64

          echo "Final macOS artifacts:"
          ls -l artifact/

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target_triple }}-artifact
          path: artifact/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/*/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
